/*
 * Generated by gdbus-codegen 2.46.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __LSM_DBUS_GENERATED_H__
#define __LSM_DBUS_GENERATED_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.storaged.Storaged.Drive.LSM */

#define LSM_TYPE_ORG_STORAGED_STORAGED_DRIVE_LSM (lsm_org_storaged_storaged_drive_lsm_get_type ())
#define LSM_ORG_STORAGED_STORAGED_DRIVE_LSM(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), LSM_TYPE_ORG_STORAGED_STORAGED_DRIVE_LSM, lsmOrgStoragedStoragedDriveLSM))
#define LSM_IS_ORG_STORAGED_STORAGED_DRIVE_LSM(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), LSM_TYPE_ORG_STORAGED_STORAGED_DRIVE_LSM))
#define LSM_ORG_STORAGED_STORAGED_DRIVE_LSM_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), LSM_TYPE_ORG_STORAGED_STORAGED_DRIVE_LSM, lsmOrgStoragedStoragedDriveLSMIface))

struct _lsmOrgStoragedStoragedDriveLSM;
typedef struct _lsmOrgStoragedStoragedDriveLSM lsmOrgStoragedStoragedDriveLSM;
typedef struct _lsmOrgStoragedStoragedDriveLSMIface lsmOrgStoragedStoragedDriveLSMIface;

struct _lsmOrgStoragedStoragedDriveLSMIface
{
  GTypeInterface parent_iface;

  gboolean  (*get_is_ok) (lsmOrgStoragedStoragedDriveLSM *object);

  gboolean  (*get_is_raid_degraded) (lsmOrgStoragedStoragedDriveLSM *object);

  gboolean  (*get_is_raid_error) (lsmOrgStoragedStoragedDriveLSM *object);

  gboolean  (*get_is_raid_reconstructing) (lsmOrgStoragedStoragedDriveLSM *object);

  gboolean  (*get_is_raid_verifying) (lsmOrgStoragedStoragedDriveLSM *object);

  guint  (*get_min_io_size) (lsmOrgStoragedStoragedDriveLSM *object);

  guint  (*get_opt_io_size) (lsmOrgStoragedStoragedDriveLSM *object);

  guint  (*get_raid_disk_count) (lsmOrgStoragedStoragedDriveLSM *object);

  const gchar * (*get_raid_type) (lsmOrgStoragedStoragedDriveLSM *object);

  const gchar * (*get_status_info) (lsmOrgStoragedStoragedDriveLSM *object);

};

GType lsm_org_storaged_storaged_drive_lsm_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *lsm_org_storaged_storaged_drive_lsm_interface_info (void);
guint lsm_org_storaged_storaged_drive_lsm_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus property accessors: */
gboolean lsm_org_storaged_storaged_drive_lsm_get_is_ok (lsmOrgStoragedStoragedDriveLSM *object);
void lsm_org_storaged_storaged_drive_lsm_set_is_ok (lsmOrgStoragedStoragedDriveLSM *object, gboolean value);

gboolean lsm_org_storaged_storaged_drive_lsm_get_is_raid_degraded (lsmOrgStoragedStoragedDriveLSM *object);
void lsm_org_storaged_storaged_drive_lsm_set_is_raid_degraded (lsmOrgStoragedStoragedDriveLSM *object, gboolean value);

gboolean lsm_org_storaged_storaged_drive_lsm_get_is_raid_error (lsmOrgStoragedStoragedDriveLSM *object);
void lsm_org_storaged_storaged_drive_lsm_set_is_raid_error (lsmOrgStoragedStoragedDriveLSM *object, gboolean value);

gboolean lsm_org_storaged_storaged_drive_lsm_get_is_raid_verifying (lsmOrgStoragedStoragedDriveLSM *object);
void lsm_org_storaged_storaged_drive_lsm_set_is_raid_verifying (lsmOrgStoragedStoragedDriveLSM *object, gboolean value);

gboolean lsm_org_storaged_storaged_drive_lsm_get_is_raid_reconstructing (lsmOrgStoragedStoragedDriveLSM *object);
void lsm_org_storaged_storaged_drive_lsm_set_is_raid_reconstructing (lsmOrgStoragedStoragedDriveLSM *object, gboolean value);

const gchar *lsm_org_storaged_storaged_drive_lsm_get_raid_type (lsmOrgStoragedStoragedDriveLSM *object);
gchar *lsm_org_storaged_storaged_drive_lsm_dup_raid_type (lsmOrgStoragedStoragedDriveLSM *object);
void lsm_org_storaged_storaged_drive_lsm_set_raid_type (lsmOrgStoragedStoragedDriveLSM *object, const gchar *value);

const gchar *lsm_org_storaged_storaged_drive_lsm_get_status_info (lsmOrgStoragedStoragedDriveLSM *object);
gchar *lsm_org_storaged_storaged_drive_lsm_dup_status_info (lsmOrgStoragedStoragedDriveLSM *object);
void lsm_org_storaged_storaged_drive_lsm_set_status_info (lsmOrgStoragedStoragedDriveLSM *object, const gchar *value);

guint lsm_org_storaged_storaged_drive_lsm_get_min_io_size (lsmOrgStoragedStoragedDriveLSM *object);
void lsm_org_storaged_storaged_drive_lsm_set_min_io_size (lsmOrgStoragedStoragedDriveLSM *object, guint value);

guint lsm_org_storaged_storaged_drive_lsm_get_opt_io_size (lsmOrgStoragedStoragedDriveLSM *object);
void lsm_org_storaged_storaged_drive_lsm_set_opt_io_size (lsmOrgStoragedStoragedDriveLSM *object, guint value);

guint lsm_org_storaged_storaged_drive_lsm_get_raid_disk_count (lsmOrgStoragedStoragedDriveLSM *object);
void lsm_org_storaged_storaged_drive_lsm_set_raid_disk_count (lsmOrgStoragedStoragedDriveLSM *object, guint value);


/* ---- */

#define LSM_TYPE_ORG_STORAGED_STORAGED_DRIVE_LSM_PROXY (lsm_org_storaged_storaged_drive_lsm_proxy_get_type ())
#define LSM_ORG_STORAGED_STORAGED_DRIVE_LSM_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), LSM_TYPE_ORG_STORAGED_STORAGED_DRIVE_LSM_PROXY, lsmOrgStoragedStoragedDriveLSMProxy))
#define LSM_ORG_STORAGED_STORAGED_DRIVE_LSM_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), LSM_TYPE_ORG_STORAGED_STORAGED_DRIVE_LSM_PROXY, lsmOrgStoragedStoragedDriveLSMProxyClass))
#define LSM_ORG_STORAGED_STORAGED_DRIVE_LSM_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), LSM_TYPE_ORG_STORAGED_STORAGED_DRIVE_LSM_PROXY, lsmOrgStoragedStoragedDriveLSMProxyClass))
#define LSM_IS_ORG_STORAGED_STORAGED_DRIVE_LSM_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), LSM_TYPE_ORG_STORAGED_STORAGED_DRIVE_LSM_PROXY))
#define LSM_IS_ORG_STORAGED_STORAGED_DRIVE_LSM_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), LSM_TYPE_ORG_STORAGED_STORAGED_DRIVE_LSM_PROXY))

typedef struct _lsmOrgStoragedStoragedDriveLSMProxy lsmOrgStoragedStoragedDriveLSMProxy;
typedef struct _lsmOrgStoragedStoragedDriveLSMProxyClass lsmOrgStoragedStoragedDriveLSMProxyClass;
typedef struct _lsmOrgStoragedStoragedDriveLSMProxyPrivate lsmOrgStoragedStoragedDriveLSMProxyPrivate;

struct _lsmOrgStoragedStoragedDriveLSMProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  lsmOrgStoragedStoragedDriveLSMProxyPrivate *priv;
};

struct _lsmOrgStoragedStoragedDriveLSMProxyClass
{
  GDBusProxyClass parent_class;
};

GType lsm_org_storaged_storaged_drive_lsm_proxy_get_type (void) G_GNUC_CONST;

void lsm_org_storaged_storaged_drive_lsm_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
lsmOrgStoragedStoragedDriveLSM *lsm_org_storaged_storaged_drive_lsm_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
lsmOrgStoragedStoragedDriveLSM *lsm_org_storaged_storaged_drive_lsm_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void lsm_org_storaged_storaged_drive_lsm_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
lsmOrgStoragedStoragedDriveLSM *lsm_org_storaged_storaged_drive_lsm_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
lsmOrgStoragedStoragedDriveLSM *lsm_org_storaged_storaged_drive_lsm_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define LSM_TYPE_ORG_STORAGED_STORAGED_DRIVE_LSM_SKELETON (lsm_org_storaged_storaged_drive_lsm_skeleton_get_type ())
#define LSM_ORG_STORAGED_STORAGED_DRIVE_LSM_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), LSM_TYPE_ORG_STORAGED_STORAGED_DRIVE_LSM_SKELETON, lsmOrgStoragedStoragedDriveLSMSkeleton))
#define LSM_ORG_STORAGED_STORAGED_DRIVE_LSM_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), LSM_TYPE_ORG_STORAGED_STORAGED_DRIVE_LSM_SKELETON, lsmOrgStoragedStoragedDriveLSMSkeletonClass))
#define LSM_ORG_STORAGED_STORAGED_DRIVE_LSM_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), LSM_TYPE_ORG_STORAGED_STORAGED_DRIVE_LSM_SKELETON, lsmOrgStoragedStoragedDriveLSMSkeletonClass))
#define LSM_IS_ORG_STORAGED_STORAGED_DRIVE_LSM_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), LSM_TYPE_ORG_STORAGED_STORAGED_DRIVE_LSM_SKELETON))
#define LSM_IS_ORG_STORAGED_STORAGED_DRIVE_LSM_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), LSM_TYPE_ORG_STORAGED_STORAGED_DRIVE_LSM_SKELETON))

typedef struct _lsmOrgStoragedStoragedDriveLSMSkeleton lsmOrgStoragedStoragedDriveLSMSkeleton;
typedef struct _lsmOrgStoragedStoragedDriveLSMSkeletonClass lsmOrgStoragedStoragedDriveLSMSkeletonClass;
typedef struct _lsmOrgStoragedStoragedDriveLSMSkeletonPrivate lsmOrgStoragedStoragedDriveLSMSkeletonPrivate;

struct _lsmOrgStoragedStoragedDriveLSMSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  lsmOrgStoragedStoragedDriveLSMSkeletonPrivate *priv;
};

struct _lsmOrgStoragedStoragedDriveLSMSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType lsm_org_storaged_storaged_drive_lsm_skeleton_get_type (void) G_GNUC_CONST;

lsmOrgStoragedStoragedDriveLSM *lsm_org_storaged_storaged_drive_lsm_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.storaged.Storaged.Manager.LSM */

#define LSM_TYPE_ORG_STORAGED_STORAGED_MANAGER_LSM (lsm_org_storaged_storaged_manager_lsm_get_type ())
#define LSM_ORG_STORAGED_STORAGED_MANAGER_LSM(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), LSM_TYPE_ORG_STORAGED_STORAGED_MANAGER_LSM, lsmOrgStoragedStoragedManagerLSM))
#define LSM_IS_ORG_STORAGED_STORAGED_MANAGER_LSM(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), LSM_TYPE_ORG_STORAGED_STORAGED_MANAGER_LSM))
#define LSM_ORG_STORAGED_STORAGED_MANAGER_LSM_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), LSM_TYPE_ORG_STORAGED_STORAGED_MANAGER_LSM, lsmOrgStoragedStoragedManagerLSMIface))

struct _lsmOrgStoragedStoragedManagerLSM;
typedef struct _lsmOrgStoragedStoragedManagerLSM lsmOrgStoragedStoragedManagerLSM;
typedef struct _lsmOrgStoragedStoragedManagerLSMIface lsmOrgStoragedStoragedManagerLSMIface;

struct _lsmOrgStoragedStoragedManagerLSMIface
{
  GTypeInterface parent_iface;
};

GType lsm_org_storaged_storaged_manager_lsm_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *lsm_org_storaged_storaged_manager_lsm_interface_info (void);
guint lsm_org_storaged_storaged_manager_lsm_override_properties (GObjectClass *klass, guint property_id_begin);


/* ---- */

#define LSM_TYPE_ORG_STORAGED_STORAGED_MANAGER_LSM_PROXY (lsm_org_storaged_storaged_manager_lsm_proxy_get_type ())
#define LSM_ORG_STORAGED_STORAGED_MANAGER_LSM_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), LSM_TYPE_ORG_STORAGED_STORAGED_MANAGER_LSM_PROXY, lsmOrgStoragedStoragedManagerLSMProxy))
#define LSM_ORG_STORAGED_STORAGED_MANAGER_LSM_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), LSM_TYPE_ORG_STORAGED_STORAGED_MANAGER_LSM_PROXY, lsmOrgStoragedStoragedManagerLSMProxyClass))
#define LSM_ORG_STORAGED_STORAGED_MANAGER_LSM_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), LSM_TYPE_ORG_STORAGED_STORAGED_MANAGER_LSM_PROXY, lsmOrgStoragedStoragedManagerLSMProxyClass))
#define LSM_IS_ORG_STORAGED_STORAGED_MANAGER_LSM_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), LSM_TYPE_ORG_STORAGED_STORAGED_MANAGER_LSM_PROXY))
#define LSM_IS_ORG_STORAGED_STORAGED_MANAGER_LSM_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), LSM_TYPE_ORG_STORAGED_STORAGED_MANAGER_LSM_PROXY))

typedef struct _lsmOrgStoragedStoragedManagerLSMProxy lsmOrgStoragedStoragedManagerLSMProxy;
typedef struct _lsmOrgStoragedStoragedManagerLSMProxyClass lsmOrgStoragedStoragedManagerLSMProxyClass;
typedef struct _lsmOrgStoragedStoragedManagerLSMProxyPrivate lsmOrgStoragedStoragedManagerLSMProxyPrivate;

struct _lsmOrgStoragedStoragedManagerLSMProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  lsmOrgStoragedStoragedManagerLSMProxyPrivate *priv;
};

struct _lsmOrgStoragedStoragedManagerLSMProxyClass
{
  GDBusProxyClass parent_class;
};

GType lsm_org_storaged_storaged_manager_lsm_proxy_get_type (void) G_GNUC_CONST;

void lsm_org_storaged_storaged_manager_lsm_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
lsmOrgStoragedStoragedManagerLSM *lsm_org_storaged_storaged_manager_lsm_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
lsmOrgStoragedStoragedManagerLSM *lsm_org_storaged_storaged_manager_lsm_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void lsm_org_storaged_storaged_manager_lsm_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
lsmOrgStoragedStoragedManagerLSM *lsm_org_storaged_storaged_manager_lsm_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
lsmOrgStoragedStoragedManagerLSM *lsm_org_storaged_storaged_manager_lsm_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define LSM_TYPE_ORG_STORAGED_STORAGED_MANAGER_LSM_SKELETON (lsm_org_storaged_storaged_manager_lsm_skeleton_get_type ())
#define LSM_ORG_STORAGED_STORAGED_MANAGER_LSM_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), LSM_TYPE_ORG_STORAGED_STORAGED_MANAGER_LSM_SKELETON, lsmOrgStoragedStoragedManagerLSMSkeleton))
#define LSM_ORG_STORAGED_STORAGED_MANAGER_LSM_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), LSM_TYPE_ORG_STORAGED_STORAGED_MANAGER_LSM_SKELETON, lsmOrgStoragedStoragedManagerLSMSkeletonClass))
#define LSM_ORG_STORAGED_STORAGED_MANAGER_LSM_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), LSM_TYPE_ORG_STORAGED_STORAGED_MANAGER_LSM_SKELETON, lsmOrgStoragedStoragedManagerLSMSkeletonClass))
#define LSM_IS_ORG_STORAGED_STORAGED_MANAGER_LSM_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), LSM_TYPE_ORG_STORAGED_STORAGED_MANAGER_LSM_SKELETON))
#define LSM_IS_ORG_STORAGED_STORAGED_MANAGER_LSM_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), LSM_TYPE_ORG_STORAGED_STORAGED_MANAGER_LSM_SKELETON))

typedef struct _lsmOrgStoragedStoragedManagerLSMSkeleton lsmOrgStoragedStoragedManagerLSMSkeleton;
typedef struct _lsmOrgStoragedStoragedManagerLSMSkeletonClass lsmOrgStoragedStoragedManagerLSMSkeletonClass;
typedef struct _lsmOrgStoragedStoragedManagerLSMSkeletonPrivate lsmOrgStoragedStoragedManagerLSMSkeletonPrivate;

struct _lsmOrgStoragedStoragedManagerLSMSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  lsmOrgStoragedStoragedManagerLSMSkeletonPrivate *priv;
};

struct _lsmOrgStoragedStoragedManagerLSMSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType lsm_org_storaged_storaged_manager_lsm_skeleton_get_type (void) G_GNUC_CONST;

lsmOrgStoragedStoragedManagerLSM *lsm_org_storaged_storaged_manager_lsm_skeleton_new (void);


/* ---- */

#define LSM_TYPE_OBJECT (lsm_object_get_type ())
#define LSM_OBJECT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), LSM_TYPE_OBJECT, lsmObject))
#define LSM_IS_OBJECT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), LSM_TYPE_OBJECT))
#define LSM_OBJECT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), LSM_TYPE_OBJECT, lsmObject))

struct _lsmObject;
typedef struct _lsmObject lsmObject;
typedef struct _lsmObjectIface lsmObjectIface;

struct _lsmObjectIface
{
  GTypeInterface parent_iface;
};

GType lsm_object_get_type (void) G_GNUC_CONST;

lsmOrgStoragedStoragedDriveLSM *lsm_object_get_org_storaged_storaged_drive_lsm (lsmObject *object);
lsmOrgStoragedStoragedManagerLSM *lsm_object_get_org_storaged_storaged_manager_lsm (lsmObject *object);
lsmOrgStoragedStoragedDriveLSM *lsm_object_peek_org_storaged_storaged_drive_lsm (lsmObject *object);
lsmOrgStoragedStoragedManagerLSM *lsm_object_peek_org_storaged_storaged_manager_lsm (lsmObject *object);

#define LSM_TYPE_OBJECT_PROXY (lsm_object_proxy_get_type ())
#define LSM_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), LSM_TYPE_OBJECT_PROXY, lsmObjectProxy))
#define LSM_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), LSM_TYPE_OBJECT_PROXY, lsmObjectProxyClass))
#define LSM_OBJECT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), LSM_TYPE_OBJECT_PROXY, lsmObjectProxyClass))
#define LSM_IS_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), LSM_TYPE_OBJECT_PROXY))
#define LSM_IS_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), LSM_TYPE_OBJECT_PROXY))

typedef struct _lsmObjectProxy lsmObjectProxy;
typedef struct _lsmObjectProxyClass lsmObjectProxyClass;
typedef struct _lsmObjectProxyPrivate lsmObjectProxyPrivate;

struct _lsmObjectProxy
{
  /*< private >*/
  GDBusObjectProxy parent_instance;
  lsmObjectProxyPrivate *priv;
};

struct _lsmObjectProxyClass
{
  GDBusObjectProxyClass parent_class;
};

GType lsm_object_proxy_get_type (void) G_GNUC_CONST;
lsmObjectProxy *lsm_object_proxy_new (GDBusConnection *connection, const gchar *object_path);

#define LSM_TYPE_OBJECT_SKELETON (lsm_object_skeleton_get_type ())
#define LSM_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), LSM_TYPE_OBJECT_SKELETON, lsmObjectSkeleton))
#define LSM_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), LSM_TYPE_OBJECT_SKELETON, lsmObjectSkeletonClass))
#define LSM_OBJECT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), LSM_TYPE_OBJECT_SKELETON, lsmObjectSkeletonClass))
#define LSM_IS_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), LSM_TYPE_OBJECT_SKELETON))
#define LSM_IS_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), LSM_TYPE_OBJECT_SKELETON))

typedef struct _lsmObjectSkeleton lsmObjectSkeleton;
typedef struct _lsmObjectSkeletonClass lsmObjectSkeletonClass;
typedef struct _lsmObjectSkeletonPrivate lsmObjectSkeletonPrivate;

struct _lsmObjectSkeleton
{
  /*< private >*/
  GDBusObjectSkeleton parent_instance;
  lsmObjectSkeletonPrivate *priv;
};

struct _lsmObjectSkeletonClass
{
  GDBusObjectSkeletonClass parent_class;
};

GType lsm_object_skeleton_get_type (void) G_GNUC_CONST;
lsmObjectSkeleton *lsm_object_skeleton_new (const gchar *object_path);
void lsm_object_skeleton_set_org_storaged_storaged_drive_lsm (lsmObjectSkeleton *object, lsmOrgStoragedStoragedDriveLSM *interface_);
void lsm_object_skeleton_set_org_storaged_storaged_manager_lsm (lsmObjectSkeleton *object, lsmOrgStoragedStoragedManagerLSM *interface_);

/* ---- */

#define LSM_TYPE_OBJECT_MANAGER_CLIENT (lsm_object_manager_client_get_type ())
#define LSM_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), LSM_TYPE_OBJECT_MANAGER_CLIENT, lsmObjectManagerClient))
#define LSM_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), LSM_TYPE_OBJECT_MANAGER_CLIENT, lsmObjectManagerClientClass))
#define LSM_OBJECT_MANAGER_CLIENT_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), LSM_TYPE_OBJECT_MANAGER_CLIENT, lsmObjectManagerClientClass))
#define LSM_IS_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), LSM_TYPE_OBJECT_MANAGER_CLIENT))
#define LSM_IS_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), LSM_TYPE_OBJECT_MANAGER_CLIENT))

typedef struct _lsmObjectManagerClient lsmObjectManagerClient;
typedef struct _lsmObjectManagerClientClass lsmObjectManagerClientClass;
typedef struct _lsmObjectManagerClientPrivate lsmObjectManagerClientPrivate;

struct _lsmObjectManagerClient
{
  /*< private >*/
  GDBusObjectManagerClient parent_instance;
  lsmObjectManagerClientPrivate *priv;
};

struct _lsmObjectManagerClientClass
{
  GDBusObjectManagerClientClass parent_class;
};

GType lsm_object_manager_client_get_type (void) G_GNUC_CONST;

GType lsm_object_manager_client_get_proxy_type (GDBusObjectManagerClient *manager, const gchar *object_path, const gchar *interface_name, gpointer user_data);

void lsm_object_manager_client_new (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *lsm_object_manager_client_new_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *lsm_object_manager_client_new_sync (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);

void lsm_object_manager_client_new_for_bus (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *lsm_object_manager_client_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *lsm_object_manager_client_new_for_bus_sync (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);


G_END_DECLS

#endif /* __LSM_DBUS_GENERATED_H__ */
